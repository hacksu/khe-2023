name: Deploy

on:
  workflow_call:
    inputs:
      force:
        required: false
        type: boolean
        description: 'Force deployment'
      host:
        required: false
        type: string
        description: 'Server to SSH into'
      user:
        required: false
        type: string
        default: 'root'
        description: 'User to SSH into the host with'
      port:
        required: false
        type: string
        default: '22'
        description: 'Port that SSH is running on'
      key:
        required: false
        type: string
        description: 'SSH Key to authenticate with'
      directory:
        required: true
        type: string
        description: 'Directory to execute commands within'
    secrets:
      host:
        required: false
      key:
        required: false
      user:
        required: false
      port:
        required: false
  # workflow_dispatch:
  # push:
  #   branches:
  #     - main

jobs:

  install:
    name: Install
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && (github.events.input.force || github.event_name == 'workflow_dispatch' || github.event_name == 'workflow_call' || contains(github.event.head_commit.message, '@deploy'))
    # Run commands to git fetch & install dependencies on the server
    steps:
      - name: Debug
        run: echo "Run commands to git fetch & install dependencies on the server"
      - name: Fetch
        uses: garygrossgarten/github-action-ssh@release
        with:
          host: ${{ secrets.host || inputs.host }}
          port: ${{ secrets.port || inputs.port }}
          username: ${{ secrets.user || inputs.user }}
          privateKey: ${{ secrets.key || inputs.key }}
          command: |
            cd ${{ inputs.directory }}
            git stash
            git fetch
            git pull
            git status
      - name: Install
        uses: garygrossgarten/github-action-ssh@release
        with:
          host: ${{ secrets.host || inputs.host }}
          port: ${{ secrets.port || inputs.port }}
          username: ${{ secrets.user || inputs.user }}
          privateKey: ${{ secrets.key || inputs.key }}
          command: |
            cd ${{ inputs.directory }}
            npm install --no-audit --no-fund
            git restore package-lock.json


  build:
    name: Build
    needs: install
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      matrix:
        project: [server, staff, web]
    steps:
      - uses: actions/checkout@v3
      - name: Calculating Hash
        run: |
          echo "TURBO_VERSION=$( npm show turbo version )" >> $GITHUB_ENV
          echo "NPM_GLOBAL_MODULES=$( npm root -g )" >> $GITHUB_ENV
          echo "TURBO_HASH=$( npx --yes turbo run build --dry --only --filter=@kenthackenough/${{ matrix.package }} | grep = | grep Hash | tail -1 | cut -f2- -d= | xargs )" >> $GITHUB_ENV
      - uses: actions/cache@v3
        name: Cache - Turbo
        id: turbo-cache
        with:
          path: |
            .turbo
            ${{ github.workspace }}/projects/*/.next/cache
          key: cache-turbo-build-${{ matrix.project }}-${{ hashFiles('package-lock.json') }}-${{ env.TURBO_HASH }}
          restore-keys: |
            cache-turbo-build-${{ matrix.project }}-${{ hashFiles('package-lock.json') }}-
      - name: Sync - Turbo Cache
        uses: garygrossgarten/github-action-scp@release
        with:
          host: ${{ secrets.host || inputs.host }}
          port: ${{ secrets.port || inputs.port }}
          username: ${{ secrets.user || inputs.user }}
          privateKey: ${{ secrets.key || inputs.key }}
          local: .turbo
          remote: ${{ inputs.directory }}/node_modules/.cache/turbo
      - name: Deploy
        uses: garygrossgarten/github-action-ssh@release
        with:
          host: ${{ secrets.host || inputs.host }}
          port: ${{ secrets.port || inputs.port }}
          username: ${{ secrets.user || inputs.user }}
          privateKey: ${{ secrets.key || inputs.key }}
          command: |
            cd ${{ inputs.directory }}
            FORCE_COLOR=1 TERM=xterm-256color bash deploy/scripts/projects/${{ matrix.project }}.sh
